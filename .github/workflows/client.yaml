name: CRX FRONTEND DEPLOYMENT WORKFLOW.

on:
  push:
    branches:
      - "staging"
  pull_request:
    branches:
      - "staging"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures a full clone

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up EKS kubeconfig
        run: |
          aws eks update-kubeconfig --name CRX-DEV --region us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit hash
        id: get-commit-hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Fetch .env from AWS Secrets Manager
        run: |
          aws secretsmanager get-secret-value --secret-id crx-client-front-end --query SecretString --output text > .env
    #cat .env  # Optional: Check contents for debugging

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: client-front-end
          IMAGE_TAG: staging-${{ env.COMMIT_HASH }}-${{ env.TIMESTAMP }}
        run: |
          # Remove old images before building
          docker system prune -a -f
          
          # Build and push the new image, passing .env as build argument
          docker build --no-cache --build-arg ENV_FILE="$(cat .env | base64 -w 0)" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Update Helm values.yaml with the latest image
        run: |
          IMAGE_TAG=staging-${{ env.COMMIT_HASH }}-${{ env.TIMESTAMP }}
          FULL_IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/client-front-end
          
          # Ensure correct updates in values.yaml
          sed -i "s|repository: .*|repository: ${FULL_IMAGE_NAME}|" crx-client/values.yaml
          sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" crx-client/values.yaml
      - name: Deploy to EKS using Helm
        run: |
          helm upgrade --install crx-client crx-client --values crx-client/values.yaml --namespace crx-dev 
